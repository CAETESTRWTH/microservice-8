package i5.las2peer.services.poems;


import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import i5.las2peer.api.Context;
import i5.las2peer.api.ManualDeployment;
import i5.las2peer.api.ServiceException;
import i5.las2peer.api.logging.MonitoringEvent;
import i5.las2peer.restMapper.RESTService;
import i5.las2peer.restMapper.annotations.ServicePath;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import org.json.simple.*;

import java.util.HashMap;
import java.util.Map;
 

/**
 *
 * 8
 *
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 *
 */
@ServicePath("poems")
@ManualDeployment
public class Poems extends RESTService {





  public Poems() {
	super();
    // read and set properties values
    setFieldValues();
    
  }

  @Override
  public void initResources() {
	getResourceConfig().register(RootResource.class);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // REST methods
  // //////////////////////////////////////////////////////////////////////////////////////

  @Api
  @SwaggerDefinition(
      info = @Info(title = "8", version = "",
          description = "",
          termsOfService = "",
          contact = @Contact(name = "me", email = "CAEAddress@gmail.com") ,
          license = @License(name = "BSD",
              url = "https://github.com/CAETESTRWTH/microservice-8/blob/master/LICENSE.txt") ) )
  @Path("/")
  public static class RootResource {

    private final Poems service = (Poems) Context.getCurrent().getService();

      /**
   * 
   * getPoems
   *
   * 
   *
   * 
   * @return Response 
   * 
   */
  @GET
  @Path("/poems")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "response")
  })
  @ApiOperation(value = "getPoems", notes = " ")
  public Response getPoems() {




     
    // service method invocations

     




    // response
    boolean response_condition = true;
    if(response_condition) {
      JSONObject result = new JSONObject();
JSONArray a = new JSONArray();
      
JSONObject temp = new JSONObject();
            temp.put("text", "Man benötigt keine allzu überangende Seele um zu verstehen, dass es hier auf Erden keine wahrhaftige und beständige Freude gibt, dass all unsere Vergnügungen nichts weiter als Blendwerk sind, dass unsere Leiden unendlich sind und dass schliesslich der Tod der uns jeden Augenblick bedroht uns unausbringlich nach wenigen Jahren in die entsetzliche Notlage bringen muss auf ewig entweder vernichtet oder unglücklich zu werden. Zwischen uns und der Hölle oder dem Himmel gibt es nur das Leben was die vergänglichte Sache de Welt ist."); 
  a.add(temp);
JSONObject temp1 = new JSONObject();
            temp1.put("text", "Sein Blick ist vom Vorübergehn der Stäbe so müd geworden, dass er nichts mehr hält. Ihm ist, als ob es tausend Stäbe gäbe und hinter tausend Stäben keine Welt. Der weiche Gang geschmeidig starker Schritte, der sich im allerkleinsten Kreise dreht, ist wie ein Tanz von Kraft um eine Mitte, in der betäubt ein großer Wille steht. Nur manchmal schiebt der Vorhang der Pupille sich lautlos auf -. Dann geht ein Bild hinein, geht durch der Glieder angespannte Stille - und hört im Herzen auf zu sein.");
  a.add(temp1);

    }
    return null;
  }



  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods (for inter service calls)
  // //////////////////////////////////////////////////////////////////////////////////////
  
  

  // //////////////////////////////////////////////////////////////////////////////////////
  // Custom monitoring message descriptions (can be called via RMI)
  // //////////////////////////////////////////////////////////////////////////////////////

  public Map<String, String> getCustomMessageDescriptions() {
    Map<String, String> descriptions = new HashMap<>();
    
    return descriptions;
  }

}
